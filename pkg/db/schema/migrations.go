// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/000001_initial_cosmos_schema.down.sql (227B)
// migrations/000001_initial_cosmos_schema.up.sql (758B)

package schema

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_initial_cosmos_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\x41\x4e\xc3\x30\x10\x05\xd0\xbd\x4f\xf1\x97\xb0\xe8\x09\xb2\xa2\x25\x45\x96\x68\x82\x68\x90\xd8\x45\x2e\xfe\x09\x16\x89\xc7\x9a\x31\x91\xb8\x3d\x8b\x0a\x89\x5e\xe0\xbd\x7d\xfb\xe4\xbb\xc6\xb9\xdd\x0e\x51\xa5\xa0\x86\xcb\x42\x43\xca\x10\x8d\x54\xc8\x84\x49\x94\x69\xce\xf8\xe2\x0f\x22\x0b\x73\x64\xfe\x48\x34\xdc\x55\x41\x51\x6e\xcc\x15\x54\x15\xb5\x7b\xf7\xf8\xda\xbf\x60\x78\xd8\x3f\xb7\xf0\x47\xb4\xef\xfe\x3c\x9c\xf1\x6d\x54\xfb\x9f\x68\x9a\x67\xaa\x21\x4c\x95\x8a\xb0\x2c\xd7\xf7\x96\xff\x0c\x1b\x71\x21\x33\x94\xab\x6c\x8c\x57\xfc\xf8\xd6\x1d\x06\xdf\x77\x7f\xca\x68\xac\xe3\x2a\x31\x4d\x89\x71\xac\x69\xa5\xd5\xb0\x96\xc6\xb9\x43\x7f\x3a\xf9\xa1\xf9\x0d\x00\x00\xff\xff\xbe\xcd\x05\x0e\xe3\x00\x00\x00")

func _000001_initial_cosmos_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initial_cosmos_schemaDownSql,
		"000001_initial_cosmos_schema.down.sql",
	)
}

func _000001_initial_cosmos_schemaDownSql() (*asset, error) {
	bytes, err := _000001_initial_cosmos_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initial_cosmos_schema.down.sql", size: 227, mode: os.FileMode(0644), modTime: time.Unix(1647810471, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2f, 0x53, 0x60, 0x10, 0x3c, 0x30, 0xa1, 0x43, 0x28, 0x92, 0x0, 0x31, 0x83, 0xfb, 0x1e, 0x83, 0xb1, 0x9b, 0x35, 0xb4, 0xa9, 0x6a, 0x36, 0xc, 0x7d, 0x8, 0x5a, 0xe1, 0x4f, 0xd2, 0x2c, 0xb7}}
	return a, nil
}

var __000001_initial_cosmos_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xcf\x6e\xdb\x3c\x10\xc4\xef\x7c\x8a\x39\xf8\x60\x1b\x5f\x12\xe0\x03\x72\x12\x7a\xa0\xe5\xb5\x43\x54\xa2\x14\x8a\xac\x93\x5e\x0c\xd6\x62\x5c\x01\x92\xa5\x8a\x34\x8a\xbe\x7d\x21\x29\x51\xff\x5c\x52\x5d\x77\x7e\xb3\xb3\xe2\xdc\xad\x19\xd6\x10\x97\x2a\x54\xb6\x46\xdc\xfa\xa6\xf5\x28\x6d\xb0\x5f\xac\x77\xf0\xa7\xaf\xae\xb1\x78\x69\x7b\x58\xe4\xad\x0f\xe7\xde\x15\x8f\xc9\x2c\xb8\x65\x58\xdf\xb1\x0d\xed\x85\x8c\x18\x8b\x15\x71\x4d\xd0\x7c\x93\x10\xc4\x0e\x32\xd3\xa0\x27\x51\xe8\x02\x57\xef\x7a\x8f\x25\x03\x80\xaa\xc4\xeb\x57\x90\x12\x3c\x41\xae\x44\xca\xd5\x33\x3e\xd2\xf3\x7f\xa3\xc2\x35\xb6\xaa\x47\xc5\x27\xae\xe2\x07\xae\x96\xff\xdf\xdf\xaf\x60\xa4\x78\x34\x34\xda\x4a\x93\x24\x93\x76\x70\xbe\xd8\xc6\xfd\x8b\xb6\xb3\xde\x7f\x6f\xfb\xf2\x2f\xed\x9f\xa2\xda\xfa\x70\xf4\xce\x5d\xa0\x45\x4a\x85\xe6\x69\xae\x3f\x4f\xa3\x53\xef\x6c\x70\x43\xfc\xdf\x46\x33\x8e\x2d\xed\xb8\x49\x34\x64\x76\x58\xae\x26\xa2\x69\xcb\xea\xa5\x1a\x90\xf7\x09\xb6\x8a\x18\xbb\xb9\x01\xbf\x86\xb6\xb1\xa1\x3a\xd9\xba\xfe\x81\x6b\x57\xda\xe0\x7e\x19\xd9\x80\x50\x35\xce\x07\xdb\x74\xfe\xed\x97\x67\x0a\x8a\xf2\x84\xc7\x84\x9d\x91\xb1\x16\x99\x44\xe8\xab\xf3\xd9\xf5\x47\xef\xc2\xf1\x8d\x3e\xce\xe8\x72\xc5\x14\x69\xa3\x64\x01\xad\xc4\x7e\x4f\x0a\xbc\xc0\x62\x31\x3d\x26\x03\x24\x1d\x6e\xe7\xa5\x1f\xa6\x84\x11\x03\x26\x6a\x18\x47\x8c\xe4\x36\x62\x8b\x05\x12\x2e\xf7\x86\xef\x09\x5d\xdd\x9d\xfd\xb7\x7a\xba\xc3\x8c\x6f\x3e\x7b\xcc\xab\xe7\x9e\xbc\xee\x1d\x02\x8e\xfd\x98\x63\xb2\x0d\xed\x32\x45\x30\xf9\x76\xbc\x4e\x4e\xfd\x61\xbb\x4c\x81\x78\xfc\x00\x95\x1d\x18\x3d\x51\x6c\x34\x21\x57\x59\x4c\x5b\xa3\xe8\xdd\x8b\x87\x8a\x66\x69\x2a\x74\xf4\x33\x00\x00\xff\xff\xd7\xe9\x7a\xfa\xf6\x02\x00\x00")

func _000001_initial_cosmos_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_initial_cosmos_schemaUpSql,
		"000001_initial_cosmos_schema.up.sql",
	)
}

func _000001_initial_cosmos_schemaUpSql() (*asset, error) {
	bytes, err := _000001_initial_cosmos_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_initial_cosmos_schema.up.sql", size: 758, mode: os.FileMode(0644), modTime: time.Unix(1647814892, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x44, 0x58, 0x8b, 0x11, 0xcf, 0xdf, 0x8d, 0x38, 0xd8, 0x11, 0x3f, 0x44, 0x2e, 0x66, 0x1a, 0xd6, 0xb8, 0xbf, 0xc7, 0xa1, 0xde, 0xe5, 0xf5, 0xd0, 0x64, 0x2b, 0x3c, 0xe0, 0xfb, 0x67, 0x78, 0x1e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_initial_cosmos_schema.down.sql": _000001_initial_cosmos_schemaDownSql,
	"000001_initial_cosmos_schema.up.sql":   _000001_initial_cosmos_schemaUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_initial_cosmos_schema.down.sql": {_000001_initial_cosmos_schemaDownSql, map[string]*bintree{}},
	"000001_initial_cosmos_schema.up.sql": {_000001_initial_cosmos_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
