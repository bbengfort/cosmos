// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CosmosClient is the client API for Cosmos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CosmosClient interface {
	Login(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*AuthToken, error)
	Status(ctx context.Context, in *HealthCheck, opts ...grpc.CallOption) (*SystemStatus, error)
}

type cosmosClient struct {
	cc grpc.ClientConnInterface
}

func NewCosmosClient(cc grpc.ClientConnInterface) CosmosClient {
	return &cosmosClient{cc}
}

func (c *cosmosClient) Login(ctx context.Context, in *Auth, opts ...grpc.CallOption) (*AuthToken, error) {
	out := new(AuthToken)
	err := c.cc.Invoke(ctx, "/cosmos.v1alpha1.Cosmos/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosmosClient) Status(ctx context.Context, in *HealthCheck, opts ...grpc.CallOption) (*SystemStatus, error) {
	out := new(SystemStatus)
	err := c.cc.Invoke(ctx, "/cosmos.v1alpha1.Cosmos/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CosmosServer is the server API for Cosmos service.
// All implementations must embed UnimplementedCosmosServer
// for forward compatibility
type CosmosServer interface {
	Login(context.Context, *Auth) (*AuthToken, error)
	Status(context.Context, *HealthCheck) (*SystemStatus, error)
	mustEmbedUnimplementedCosmosServer()
}

// UnimplementedCosmosServer must be embedded to have forward compatible implementations.
type UnimplementedCosmosServer struct {
}

func (UnimplementedCosmosServer) Login(context.Context, *Auth) (*AuthToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedCosmosServer) Status(context.Context, *HealthCheck) (*SystemStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedCosmosServer) mustEmbedUnimplementedCosmosServer() {}

// UnsafeCosmosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CosmosServer will
// result in compilation errors.
type UnsafeCosmosServer interface {
	mustEmbedUnimplementedCosmosServer()
}

func RegisterCosmosServer(s grpc.ServiceRegistrar, srv CosmosServer) {
	s.RegisterService(&Cosmos_ServiceDesc, srv)
}

func _Cosmos_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosmosServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.v1alpha1.Cosmos/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosmosServer).Login(ctx, req.(*Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cosmos_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosmosServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.v1alpha1.Cosmos/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosmosServer).Status(ctx, req.(*HealthCheck))
	}
	return interceptor(ctx, in, info, handler)
}

// Cosmos_ServiceDesc is the grpc.ServiceDesc for Cosmos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cosmos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.v1alpha1.Cosmos",
	HandlerType: (*CosmosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Cosmos_Login_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Cosmos_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/v1alpha1/api.proto",
}
